<?php

namespace Services\User;

use Onemla\OnemlaHelper;
use Onemla\OnemlaModel;
use Onemla\OnemlaRequest;
use Onemla\OnemlaService;
use Onemla\UCenter\UCenterHelper;
use Think\Model;

class UserService extends OnemlaService {

    /**
     * 错误代码
     */
    const CODE_SUCCESS = 1;    //成功
    const CODE_ERROR_EXIST = 200;  //已经存在
    const CODE_ERROR_NOT_EXIST = 201;  //账户不存在
    const CODE_ERROR_PASSWORD = 202;  //密码错误

    /**
     * 用户类型
     */
    const USER_TYPE_SUPER_ADMIN = 1;  //超级管理员
    const USER_TYPE_ADMIN = 2;  //管理员
    const USER_TYPE_MEMBER = 3;  //会员


    /*
     * 用户状态
     * */
    const USER_STATUS_NORMAL = 1;    //正常
    const USER_STATUS_LOCK = 2;    //锁定、黑名单
    const USER_STATUS_DELETE = 3;    //删除

    /**
     * 验证方式
     */
    const AUTH_TYPE_USER_NAME = 1;  //用户名验证
    const AUTH_TYPE_EMAIL = 2;  //邮箱验证
    const AUTH_TYPE_PHONE = 3;  //手机号码验证

    /**
     * other验证方式
     */
    const OTHER_AUTH_TYPE_SINA = 1;  //新浪
    const OTHER_AUTH_TYPE_WECHAT = 2;  //微信
    const OTHER_AUTH_TYPE_QQ = 3;  //QQ

    /**
     * 获取错误信息
     */

    public static function getErrorMessage($iCode) {
        $pConfig = array(
            self::CODE_ERROR_NOT_EXIST => "账户不存在",
            self::CODE_ERROR_PASSWORD => "密码错误",
            self::CODE_ERROR_EXIST => "账户已存在",
            self::USER_STATUS_LOCK => "账户已锁定"
        );
        return isset($pConfig[$iCode]) ? $pConfig[$iCode] : "";
    }

    /**
     * 根据验证类型获取字段
     */
    private static function getFieldByAuthType($iAuthType) {
        $pConfig = array(
            self::AUTH_TYPE_USER_NAME => "user_name",
            self::AUTH_TYPE_EMAIL => "email",
            self::AUTH_TYPE_PHONE => "phone",
        );
        return $pConfig[$iAuthType];
    }

    /**
     * 根据验证类型获取字段
     */
    private static function getFieldByOtherAuthType($iOtherAuthType) {
        $pConfig = array(
            self::OTHER_AUTH_TYPE_SINA => "sina",
            self::OTHER_AUTH_TYPE_WECHAT => "wechat",
            self::OTHER_AUTH_TYPE_QQ => "qq",
        );
        return $pConfig[$iOtherAuthType];
    }

    /*
     * 根据输入字符串判断登录方式
     * @param 用户输入的字符串
     * @return int(user表字段名)
     * */

    public static function getLoginType($pStr) {
        $pStr = trim($pStr);
        if (preg_match('/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', $pStr) === 1) {
            return self::getFieldByAuthType(self::AUTH_TYPE_EMAIL);
        } elseif (preg_match('/^1[3|4|5|8][0-9]\d{4,8}$/', $pStr) === 1) {
            return self::getFieldByAuthType(self::AUTH_TYPE_PHONE);
        } else {
            return self::getFieldByAuthType(self::AUTH_TYPE_USER_NAME);
        }
    }

    /**
     * 加密密码
     */
    public static function hashPassword($pPassword) {
        $pTokenSecret = C('TOKEN_SECRET');
        return UCenterHelper::hashPassword($pTokenSecret . $pPassword);
    }

    /**
     * 验证密码
     * @param $pPassword 密码
     * @param $pHash 密码hash值
     * @return bool
     */
    public static function verifyPassword($pPassword, $pHash) {
        $pTokenSecret = C('TOKEN_SECRET');
        return UCenterHelper::verifyPassword($pTokenSecret . $pPassword, $pHash);
    }

    /**
     * 是否已经被注册
     */
    public function isHaveRegister($pAccount, $iAuthType) {
        $pUser = M("user");
        return $pUser->where(array(
                    self::getFieldByAuthType($iAuthType) => $pAccount,
                ))->count();
    }

    /**
     * 注册用户
     */
    public function registerUser($data) {
        $pUserModel = M("user");
        $pUserInfoModel = M("user_info");
        $pInsert = array(
            'user_name' => $data['user_name'],
            'password' => self::hashPassword($data['password']),
            'email' => $data['email'],
            'wechat' => $data['wechat'],
            'qq' => $data['qq'],
            'phone' => $data['phone'],
            'user_type'=>$data['user_type'],
            'reg_ip' => get_client_ip(),
            'last_ip' => get_client_ip(),
            'last_time' => OnemlaRequest::requestTime(),
            'update_time' => date("Y-m-d H:i:s"),
            'create_time' => date("Y-m-d H:i:s"),
        );
        $uid = $pUserModel->add($pInsert);

        if ($uid > 0) {
            $pInsert['id'] = $uid;

            $pInsertInfo = array(
                'user_id' => $uid,
                'real_name' => $data['user_name'],
                'update_time' => date("Y-m-d H:i:s"),
                'create_time' => date("Y-m-d H:i:s"),
            );

            $id = $pUserInfoModel->add($pInsertInfo);

            if ($id == 0) {
                $pUserModel->delete(array(
                    'id' => $uid
                ));
                return false;
            }

            $pUser = new User();
            $pUser->setUserInfo($pInsert);
            $pUser->updateSession();

            return true;
        }

        return false;
    }

    /**
     * 密码修改
     */
    public function changeUserPwd($pAccount, $pPassword, $iAuthType) {
        $pUserModel = M("user");
        return $pUserModel->where(array(
                    self::getFieldByAuthType($iAuthType) => $pAccount
                ))->save(array(
                    'password' => self::hashPassword($pPassword)
        ));
    }

    /**
     * 验证账户
     */
    public function verifyAccount($pAccount, $pPassword, $iUserType = self::USER_TYPE_MEMBER) {
        $pField = self::getLoginType($pAccount); //判断登录类型
        $pUserModel = M("user");

        $where = array(
            $pField => $pAccount,
//            'state' => 1
        );

//        if ($iUserType == self::USER_TYPE_ADMIN || $iUserType == self::USER_TYPE_SUPER_ADMIN) {
//            $where['user_type'] = array(array('eq', self::USER_TYPE_ADMIN), array('eq', self::USER_TYPE_SUPER_ADMIN), 'or');
//        } else {
//            $where['user_type'] = $iUserType;
//        }
        $pUserInfo = $pUserModel->where($where)->find();

        if (empty($pUserInfo)) {
            return self::CODE_ERROR_NOT_EXIST;
        }
        if($pUserInfo['state'] == 2){
            return self::USER_STATUS_LOCK;
        }
        if (!self::verifyPassword($pPassword, $pUserInfo['password'])) {
            return self::CODE_ERROR_PASSWORD;
        }

        /* 更新登录信息 */
        $lData = array(
            'login_count' => $pUserInfo['login_count'] + 1,
            'last_ip' => get_client_ip(),
            'last_time' => time()
        );
        $pUserModel->where(array('id' => $pUserInfo['id']))->setField($lData);

        $pUser = new User();
        $pUser->setUserInfo($pUserInfo);
        $pUser->updateSession();

        return self::CODE_SUCCESS;
    }

    /**
     * 注销
     */
    public function logout() {
        OnemlaHelper::session(SESSION_UCENTER, null);
        session_destroy();
    }

    public function getUserInfo($uid = 0, $field = '*') {
        if ($uid == 0)
            $uid = OnemlaHelper::getUserId();

        $user = M('user');
        $where['id'] = $uid;
        $data = $user->field($field)->where($where)->find();

        return $data;
    }

}
